<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mrshulan&#39;s blog</title>
  
  <subtitle>一个爱旅行 爱摄影 爱美食 喜欢仪式感的前端程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mrshulan.com/"/>
  <updated>2019-03-12T02:58:29.703Z</updated>
  <id>https://mrshulan.com/</id>
  
  <author>
    <name>Mr.shulan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://mrshulan.com/2019/03/12/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://mrshulan.com/2019/03/12/Markdown语法/</id>
    <published>2019-03-12T02:52:18.000Z</published>
    <updated>2019-03-12T02:58:29.703Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="http://qiniu.mrshulan.com/%E6%BB%A8%E6%B1%9F%E5%9B%AD%E5%8C%BA%E5%95%86%E5%AD%A6%E9%99%A2.jpg" alt="" style="width:100%"></p><a id="more"></a><ol><li><p>有序列表 -&gt; 输入 1. + 空格(不加空格就没用哈</p><blockquote><ol><li>mrshulan</li><li>Jimmie</li></ol></blockquote></li><li><p>无序列表 -&gt; 在英文状态下 - + 空格</p><blockquote><ul><li>mrshulan</li><li>Jimmie</li></ul></blockquote></li><li><p>代码块 -&gt; 一行代码 包裹` 里边放内容 代码块 <figure class="highlight plain"><figcaption><span>单的</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; `console.log(&quot;typora是一款小众mini的markdown编辑器&quot;)`</span><br><span class="line">&gt;</span><br><span class="line">&gt; ```javascript</span><br><span class="line">&gt; () =&gt; &#123;</span><br><span class="line">&gt; console.log(&quot;这是代码块&quot;)</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><blockquote></blockquote></li><li><p>引用 -&gt; &gt; + 空格</p></li><li><p>标题 -&gt; # ## ### 六级标题</p><blockquote><h1 id="一级"><a href="#一级" class="headerlink" title="一级"></a>一级</h1><h2 id="二级"><a href="#二级" class="headerlink" title="二级"></a>二级</h2><h3 id="三级"><a href="#三级" class="headerlink" title="三级"></a>三级</h3><h4 id="四级"><a href="#四级" class="headerlink" title="四级"></a>四级</h4><h5 id="五级"><a href="#五级" class="headerlink" title="五级"></a>五级</h5><h6 id="六级"><a href="#六级" class="headerlink" title="六级"></a>六级</h6></blockquote></li><li><p>居中 -&gt; <center> </center> text-align 啥的</p><blockquote><center>HTML标签的方法居中</center></blockquote></li><li><p>强调加粗下划线删除线 -&gt; 两侧包裹符号*   **  <u></u>  ~~</p><blockquote><p><em>斜体强调</em></p><p><strong>加粗</strong></p><p><u>下划线</u></p><p><del>删除线</del></p></blockquote></li><li><p>转义 -&gt; \ + ` * \ ! # - . _</p><blockquote><p>\</p><p>!</p><p>#</p></blockquote></li><li><p>分割线 -&gt; ——— 三个以上</p><blockquote><p>上面</p><hr><p>下面</p></blockquote></li><li><p>任务列表 -&gt; “-空格[空格] 内容” [x]就是表示完成了 是动态的</p><blockquote><ul><li style="list-style: none"><input type="checkbox"> 吃饭</li><li style="list-style: none"><input type="checkbox"> 打豆豆</li><li style="list-style: none"><input type="checkbox" checked> 睡觉 </li></ul></blockquote></li><li><p>table 直接用ctrl + t 吧</p><blockquote><p>|  前端   | 后台 | 数据库 |<br>| :—–: | :–: | :—-: |<br>| <strong>css</strong> |      |        |<br>| <strong>JS</strong>  |      |        |</p></blockquote></li><li><p>插入URL超链接 -&gt; &lt;&gt; 里边就是网址</p><blockquote><p><a href="http://mrshulan.com">http://mrshulan.com</a>    </p></blockquote></li><li><p>注释 -&gt; [^]</p></li><li><p>数学公式 -&gt; 快捷键</p></li><li><p>表情 -&gt; 包裹符号 : 里边是英文单词  中文用输入法提示吧 <a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">表情大全</a></p><blockquote><p>:cry:</p><p>:happy:</p></blockquote></li><li><p>目录列表 -&gt; [TOC] 里边是大写写TOC</p><blockquote><p>[TOC]</p><p>会自动收录所有的标签</p></blockquote></li><li><p>链接与图片 -&gt; 普通链接[title] + (url) 图文链接 ![title] + (url)</p><blockquote><p><a href="https://github.com/Mrshulan" target="_blank" rel="noopener">我的GIthub地址</a></p><p><img src="http://qiniu.mrshulan.com/%E6%BB%A8%E6%B1%9F%E5%9B%AD%E5%8C%BA%E5%95%86%E5%AD%A6%E9%99%A2.jpg" alt="滨江园区商学院"></p></blockquote></li><li><p>引用 -&gt;   &gt; + 空格</p></li><li><p>一些注意事项 </p><blockquote><p>​    </p><ol><li>换行 enter 一次换两(适用于排版) shift + enter 是换一行(适用于一段文字)</li><li>要注意英文和中文状态 和 空格的激活渲染</li><li>结束上面一行的效果 一次enter跟随 两次enter结束  shift + tab 首行？或者在源代码模式下自行调整:happy: </li></ol></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Git/GitHub 使用过程中的一些笔记
    
    </summary>
    
      <category term="笔记" scheme="https://mrshulan.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Markdown" scheme="https://mrshulan.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Git 和 GitHub 学习笔记</title>
    <link href="https://mrshulan.com/2019/02/22/Git-%E5%92%8C-GitHub-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://mrshulan.com/2019/02/22/Git-和-GitHub-学习笔记/</id>
    <published>2019-02-22T14:48:00.000Z</published>
    <updated>2019-03-12T02:47:37.493Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="http://qiniu.mrshulan.com/git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8.jpg" alt="Git 常用命令速查表" style="width:100%"></p><a id="more"></a><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>历史：Linus的作者创建了开源的Linux，02年以前代码管理都依赖手动合并，后来管理不了了，拒绝SVN和CVS这些中央式版本控制的工具(原因如下表格)，采用免费授权给Linux社区的BitKeeper工具（这个公司就只授权了Linux社区，其他人使用都是要钱的），再后来05年社区的大牛要破解BitKeeper被人家公司发现要收回BitKeeper对Linux的免费的使用权，Linus一口气两周内用C写了一个分布式的版本控制系统——Git。接着08年GitHub问世，利用Git为无数开源项目提供代码的托管存储</p><p>分布式版本控制系统：Git,BitKeeper</p><p>集中式版本控制系统：CVS,SVN</p><h2 id="Git和SVN对比"><a href="#Git和SVN对比" class="headerlink" title="Git和SVN对比"></a>Git和SVN对比</h2><table><thead><tr><th></th><th>集中式（SVN）</th><th>分布式（Git）</th></tr></thead><tbody><tr><td>代码保存</td><td>项目要开发完推送给中央服务器。</td><td>开发人员在本地仓库存储提交代码修改的历史</td></tr><tr><td>网络</td><td>b必需是在<strong>联网</strong>的环境下工作,受制于网络和文件</td><td>没有网络的情况下也可以在<strong>本地仓库</strong>执行commit、查看版本提交记录、以及分支操作，在有网络的情况下执行 push到Remote Repository<strong>远端仓库</strong>。</td></tr><tr><td>文件存储格式</td><td>按照原始文件存储，体积较大</td><td>按照元数据方式存储，体积很小</td></tr><tr><td>分支操作的影响</td><td>创建新的分支则所有的人都会拥有和你一样的分支，本质上是因为都在中央仓库上操作</td><td>分支操作不会影响其他开发人员，备份灵活</td></tr><tr><td>提交</td><td>提交的文件会直接记录到中央版本库</td><td>提交是本地操作，需要执行push操作才会到远端仓库</td></tr></tbody></table><p>分布式版本控制系统的远端仓库，有时候也被叫“中央服务器”，不同于集中式的中央服务器，分布式中它可以理解成一个中转站，用来协作同步各个本地仓库的代码，实际上任何一个服务器都可以取代它的作用，只是为了方便大家“交换”代码</p><h2 id="克隆仓库和创建仓库"><a href="#克隆仓库和创建仓库" class="headerlink" title="克隆仓库和创建仓库"></a>克隆仓库和创建仓库</h2><p>git clone/ git init/ git remote add origin</p><p>如果你已经在github自己创建了一个远程仓库（如果是空的话）会有一波提示，接下来我们</p><p><code>git clone https://github.com/****.git</code>  会自动在你选中的目录下生成一个一模一样的文件夹</p><p>当然我们可以直接在本地直接创建然后在和远程仓库进行关联</p><p>在创建好的文件夹下</p><p><code>git init</code> 生成一个.git隐藏的文件夹也就是我们的本地仓库（Local Repository）.git文件夹所在的根目录就是我们的工作目录（Working Directory）</p><p>然后进行关联</p><p><code>git remote add origin https://github.com/****.git</code> 如果没有响应就是最好的回应</p><h2 id="工作目录-暂存区-版本库-远程仓库"><a href="#工作目录-暂存区-版本库-远程仓库" class="headerlink" title="工作目录 暂存区 版本库 远程仓库"></a>工作目录 暂存区 版本库 远程仓库</h2><p><strong>工作目录（working directory）</strong>就是我们创建的项目文件夹，我们开发项目的地方，.git所在根目录</p><p><code>新创建的文件添加到暂存区--- git add</code> file</p><p><code>暂存区的文件拉回来修改文件 --- git checkout -- file</code> 注意是要修改</p><p><strong>暂存区（index/staging area）</strong>是指储存了所有待提交的改动的地方，只有在暂存区存在的文件，本地仓库才会追踪(track)到它的变化。</p><p>暂存区对应在.git文件夹中的index中，是一个二进制文件，可以理解为一个索引，内容包括根据文件名，文件模式和元数据进行排序的文件路径列表，每个路径都有权限以及Blob类型的SHA-1标识符（就是我们平时提交记录对应的那一串编码，下面会讲到）</p><p><code>把文件从暂存区提交到本地的版本库中——git commit -m&quot;备注&quot;</code> 会head对应的提交信息生成其sha-1值</p><p><code>从本地版本库中拉回来到暂存区 --- git reset HEAD file</code></p><p><strong>版本库/本地仓库</strong>（Repository）可以理解为就是我们分布式版本控制中提到的我们本地的代码版本库，这里面有我们所有提交版本版本的数据。</p><p>对应.git中的HEAD,实质上是一个指针，指向最新放入仓库的版本，默认情况下git为我们自动生了一个分支master，head就指向这个分支</p><p><strong>远程仓库</strong>（Remote）托管代码的服务器，上面介绍分布式版本控制中的远程中央仓库，可以理解为一台专门用于协作开发时数据交换的电脑。</p><p><img src="http://qiniu.mrshulan.com/1546406825010.png" alt="1546406825010"></p><p><img src="http://qiniu.mrshulan.com/1546406852485.png" alt="1546406852485"></p><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p><code>git diff 比较的是工作区和暂存区的差别</code></p><p><code>git diff HEAD 可以查看工作区和版本库的差别</code></p><p><code>git diff --cached(===staged) 比较的是暂存区和版本库的差别</code></p><h2 id="一个简单的流程-素质三连🍋"><a href="#一个简单的流程-素质三连🍋" class="headerlink" title="一个简单的流程(素质三连🍋)"></a>一个简单的流程(素质三连🍋)</h2><h4 id="git-status-git-add-git-commit-git-log-git-pull-git-push"><a href="#git-status-git-add-git-commit-git-log-git-pull-git-push" class="headerlink" title="git status/ git add/ git commit/ git log/ git pull /git push"></a>git status/ git add/ git commit/ git log/ git pull /git push</h4><p>前提是在本地仓库已经和远程仓库相互关联的情况下操作 push</p><p>​    </p><p><code>touch test.js</code> </p><p><code>git status</code> 查看工作目录和暂存区的状态 </p><p><img src="http://qiniu.mrshulan.com/1546413685960.png" alt="1546413685960"></p><p>untracked files表示未追踪的文件，就是新创建的test.js，未追踪的意思就是当前本地git仓库对它没有任何的记录，对本地仓库来说是不存在的，在我们提交代码的时候也不会提交上去，这时就用到了add命令</p><p><code>git add 文件</code> 将文件添加到暂存区 如果是 <code>git add .</code>就是所有改动的文件</p><p><img src="http://qiniu.mrshulan.com/1546413926159.png" alt="1546413926159"></p><p>新添加的文件进入暂存区，从untracked未跟踪状态变为stage已暂存状态。接着文件进入暂存区之后，我们的修改就都可以被暂存区追踪到，并且会显示状态。</p><p><img src="http://qiniu.mrshulan.com/1546414060174.png" alt="1546414060174"></p><p>new file modified这类标志的状态提醒，下面一个提示不再是untracked（不在追踪范围）而是not staged for commit（还不在待提交的暂存区中）。意思就是，本地仓库现在已经认识了这个文件，它被修改了，还没到储存待提交信息的暂存区中，还是使用add添加到暂存区，所以还得需要git add命令才会把颜色从红色变成绿色。</p><p>同时要注意，通过 add 添加进暂存区的不是文件名，而是具体的文件改动内容，我们把在执行add时的改动都被添加进了暂存区，在add 之后的新改动并不会自动被添加进暂存区。所以对test.js执行了add之后如果再修改test.js，那么工作目录和暂存区都会有这个文件</p><p><code>git commit -m&quot;提交到版本库的地址信息备注 方便识别&quot;</code></p><p>如果没有-m 会自动进入vim编辑模式 i(插入编辑模式) -&gt; esc-&gt;:wq 退出并强制保存(注意在英文状态下，不然就会有奇怪的闪烁)</p><p><img src="http://qiniu.mrshulan.com/1546414815222.png" alt="1546414815222"></p><p><code>git log</code> 查看提交历史</p><p><img src="http://qiniu.mrshulan.com/1546415158924.png" alt="1546415158924"></p><p><code>git log -p</code> 查看每个commit的每一行改动</p><p><code>git log --stat</code> 查看文件修改，不展示具体修改细节</p><p><code>git relog</code> 简短的查看改动 （用的比较多）</p><p><code>git show commit编码(例如7c62943) 只要能唯一识别即可</code> 查看该commit的具体改动</p><p><img src="http://qiniu.mrshulan.com/1546415497198.png" alt="1546415497198"></p><p><code>git push</code> 将版本提交到远程仓库 （这个步骤一般出错居多）</p><p>如果是这样的话</p><p><img src="http://qiniu.mrshulan.com/1546415767181.png" alt="1546415767181"></p><p>这就说明你没有git add remote origin http：…. 一开始就跟你们说过了</p><p>如果是这样的话</p><p><img src="http://qiniu.mrshulan.com/1546415862596.png" alt="1546415862596"></p><p>当前分支没有和上游远程分支做关联，git不知道你要推送到远程仓库的哪个分支上，我们想要和远程的master分支关联，按照提示输入：git push –set–upstream origin master 即可</p><p>origin是远程仓库的代指，master是远程仓库上的分支名，这里的origin/master，即远程仓库的master分支，就是我们test项目的远程仓库。我们把关联的远程分支设置成了origin/master，之后直接执行git push默认就会推到远程的master下，当然我们不省略传入远程的分支名就会推送到对应的分支上。</p><p>如果是这样的话</p><p><img src="http://qiniu.mrshulan.com/1546416177911.png" alt="1546416177911"></p><p>如果你不是clone的初始化而是直接本地init而在远程仓库创建的时候添加了readme 或者 选上了 readme/.gitignore，证书等这些都会算作一次线上提交，而然本地没有，这不就冲突了吗，或者说是在远程仓库做出了修改，与远程仓库版本不一致，</p><p>当然光执行pull也是不够的，远程仓库有一个提交，我们本地仓库也有一个提交，直接拉取远端的代码，这两个提交谁先谁后呢？没有操作相同文件时可能无所谓，但是一旦都修改了同一个文件，就涉及到哪次提交在后，覆盖的问题，所以要执行：</p><p><code>git pull --rebase origin master</code> 把远程库中的更新合并到本地库中，–rebase的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中,这样push就ok拉</p><p>看一样提交记录</p><p><img src="http://qiniu.mrshulan.com/1546416846353.png" alt="1546416846353"></p><p>远程仓库的initial commit是第一条记录，我们刚提交的在后面</p><h2 id="commit信息历史"><a href="#commit信息历史" class="headerlink" title="commit信息历史"></a>commit信息历史</h2><h4 id="commit的id"><a href="#commit的id" class="headerlink" title="commit的id"></a>commit的id</h4><p>每一个commit对应一个唯一id，是40为的数字和字符组成的字符串，是属于每一个commit的一个id，一个SHA-1校验和</p><p>来详细的看一看</p><p><code>git cat-file commit HEAD</code></p><p><img src="http://qiniu.mrshulan.com/1546417067435.png" alt="1546417067435"></p><p>第一行，tree和对应的hash值，根据这个hash值我们可以得到本次提交的整个目录树和对应的hash值</p><p><code>git cat-file -p hash值</code> -p 一种更加优雅的方式展示对象的内容</p><p><img src="http://qiniu.mrshulan.com/1546417235612.png" alt="1546417235612"></p><p>里面的每一个文件都可以根据hash继续展开 直到叶子结点。</p><p>回到head信息组成这里，第二行parent，是当前查看的commit的上一条commit的id；第三行作者信息以及提交时的时间戳；第四行提交者的信息以及提交时的时间戳。</p><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>commit记录后面括号对应着指向这个commit的引用，注意到commit提交信息第一条后面的括号里的HEAD，它永远指向当前的commit，就是当前工作目录对应的提交的commit。</p><p>HEAD同时也指向一个分支，图中的HEAD-&gt;master，表示当前工作目录对应的是本地master分支</p><p>通常每次有一条新的commit记录时，工作目录会与这条最新的commit对应，HEAD指针也会指向它（在使用checkout reset等操作切换当前工作目录对应的commit时，HEAD也会跟过去）</p><p><img src="http://qiniu.mrshulan.com/1546417810514.png" alt="1546417810514"></p><p>我们commit了最新的提交信息还没push到远端时，本地的HEAD指向我们最新的提交，而远端仓库的还停留在之前的那条commit记录，origin/master指向它。</p><p>在我们push操作的时候，HEAD并不会推送到远端，远端的HEAD永远指向默认分支master</p><h4 id="master分支"><a href="#master分支" class="headerlink" title="master分支"></a>master分支</h4><p>一个没有提交记录的新项目，在创建第一条commit时，会默认提交到master分支，同时HEAD也指向它。</p><p>在我们clone远端项目时，默认也会在本地checkout出一个master分支，并将本地工作目录的文件内容保持与clone下来的项目的master分支的最新commit一致，HEAD也会指向它。</p><p>绝大多数团队会选择master作为核心的分支，其余分支都是围绕master来开发，但本质上各个分支都是一样的，都是一串commit信息的记录。</p><h2 id="breach分支创建和切换"><a href="#breach分支创建和切换" class="headerlink" title="breach分支创建和切换"></a>breach分支创建和切换</h2><p>git branch/git checkout/git checkout -b/git branch -d</p><p><code>git branch 新的分支名</code> 创建分支</p><p>这样创建完新的分支，并不会自动切换到新的分支上</p><p><code>git checkout 分支名</code> 切换分支</p><p>一步到位</p><p><code>git checkout -b 新的分支名</code> 创建并切换到新的分支</p><p><code>git checkout -b origin/feature1</code> 创建并切换到新的分支并与远程进行关联</p><p><img src="http://qiniu.mrshulan.com/1546418561648.png" alt="1546418561648"></p><p>切换到新的分支之后，HEAD也跟着指了过去，当前新分支有新的commit时，HEAD会指向这个分支最新的commit，master会停留在它之前对应的commit记录那里，因为那是属于master分支最新的commit记录。</p><p><code>git branch -d 分支名</code> 删除分支</p><p>注意，HEAD指向的分支无法删除，也就是我们所在的分支，需要先checkout切换到别的分支，再去删除之前的分支。</p><p>我们删除了一个分支后，并不会删除这个分支上的提交记录，其实branch这个分支的概念，更确切的说是一个引用，是一个指向，指向一串的提交记录，我们删除了分之后只是删除了对这个分支包含的提交记录的一个引用，虽然说我们没有删除它们，但是Git的回收机制会定期清理那些不在任何分支上的commit记录。</p><p>同时在分支push的时候记得在远程仓库也要创建一个相同的分支名，并且相关联起来，才可以准确的push</p><h2 id="merge-合并冲突"><a href="#merge-合并冲突" class="headerlink" title="merge 合并冲突"></a>merge 合并冲突</h2><p>git merge/git merge –abort</p><p>merge意思为合并，把目标分支合并到当前分支，一般在我们分支协作开发，某一分支的开发完成可以合并如主流程的时候，这样去操作。</p><p>实际的行为是，从当前分支和要合并的目标分支的分叉点开始，将目标分支路径上的所有commit内容应用到当的commit，并生成一个新的commit</p><p>我们在本地master分支上执行</p><p><code>git merge 分支名</code></p><p>被合并的分支有许多新的动作，如果要是把主分支的东西给改了就会还提交了 就会出现合并冲突</p><p><img src="http://qiniu.mrshulan.com/1546421607709.png" alt="1546421607709"></p><p>直接打开vi test.js</p><p><img src="http://qiniu.mrshulan.com/1546421637898.png" alt="1546421637898"></p><p>&lt;&lt;  ===  &gt;&gt;&gt; 作为冲突分隔内容 你看你要要留住啥就改成啥样 然后在<strong>重新 add commit push</strong>就好了</p><p><code>git merge --abort</code> 取消merge操作 在没有push之前</p><p>当<strong>我们所在分支落后于目标分支</strong>时（目标分支包含当前分支所有的提交记录），在当前分支对目标分支执行merge，就是直接把HEAD和所在分支都指向目标分支最新的commit，也成为fast-forward快速前移</p><p>例如我们现在从master新建一个分支branch2，并修改了一些内容，有两次提交记录，期间master没有新的提交，一直停留在分叉点，然后我们回到master去merge分支branch2,这时branch2是包括我们所在分支的所有记录，领先于我们所在分支的，执行以下操作</p><p><code>git merge origin/branch2</code> 就会产生 fast-forward</p><p><img src="http://qiniu.mrshulan.com/1546493234042.png" alt="1546493234042"></p><p>到branch2领先的两个提交都被master拿到，接着push到远端master，远端master上的提交记录就多了两条branch2的提交记录</p><p>当<strong>我们所在分支领先于目标分支</strong>时（当前分支包含目标分支所有的提交记录），这种时候，merge相当于空操作</p><p>当然，我们也可以通过命令修改默认生成的提交的信息，也可以不默认生成新的commit，这里只是简单介绍常用命令的基本用法，merge详细的使用可以看下：</p><p><a href="https://blog.csdn.net/andyzhaojianhui/article/details/78072143" target="_blank" rel="noopener">https://blog.csdn.net/andyzhaojianhui/article/details/78072143</a></p><p><img src="http://qiniu.mrshulan.com/1546426461949.png" alt="1546426461949"></p><h2 id="rebase避免出现的分支合并"><a href="#rebase避免出现的分支合并" class="headerlink" title="rebase避免出现的分支合并"></a>rebase避免出现的分支合并</h2><p>git rebase</p><p>通过merge来协作开发，历史记录会出现很多分支，如果想避免这样导致过乱，可是采用rebase命令。</p><p><code>git rebase 目标分支</code></p><p>假设我们需要将branch2的记录合并到master，并且丢弃现有的分叉，执行</p><p><code>git checkout branch2</code> 先切换到需要被合并的分支branch2</p><p><code>git rebase master</code> 向要合进去的分支master发出rebase命令</p><p>实际上是我们需要被合并的分支feature1，将其分叉点2重新设置为要被合进的目标分支master的最新commit3上，4和5的基础点从2变成了3，同时我们所在的分支的最新一条记录和HEAD都对应到合并后的最新的commit记录7上</p><p><img src="http://qiniu.mrshulan.com/1546426251806.png" alt="1546426251806"></p><p><img src="http://qiniu.mrshulan.com/1546426261456.png" alt="1546426261456"></p><p><img src="http://qiniu.mrshulan.com/1546495518692.png" alt="1546495518692"></p><p>branch2  rebase 之后打印git log</p><p><img src="http://qiniu.mrshulan.com/1546495554111.png" alt="1546495554111"></p><p>4和5因为没有分支引用指向它，之后会被Git回收机制清除</p><p>然后，我们<strong>回到master上对feature1执行一次merge</strong>，回忆下上面讲的fast-forward，如果所在分支包含要merge分支的commit信息，我们就只是把HEAD和对应分支向后移动，指向最新的commit，也就是master和HEAD都指向7</p><p><img src="http://qiniu.mrshulan.com/1546495710467.png" alt="1546495710467"></p><p>也就是绕个圈子在 branch2上rebase 把head移动然后 再到master是进行merge产生一个fast-forward</p><h4 id="为什么不在master上执行rebase呢？"><a href="#为什么不在master上执行rebase呢？" class="headerlink" title="为什么不在master上执行rebase呢？"></a>为什么不在master上执行rebase呢？</h4><p>在我们分支开发的时候，通常都是以master以核心的分支，如果我们在master上对feature1执行rebase，那么3和6就夫指出新的接在5后面，3和6这两个commit在我们核心分支所包含的路径中不存在了，现在的master是124567，这样协作开发的其余同事在push代码时，因为他们本地有3和6而远端master没有3和6，就是提交失败（具体原因开篇readme和.gitignore那里同理）</p><p>关于rebase，只要记住，它是修改需要<strong>被合并</strong>的分支的基础点，同时与merge相反，需要在<strong>被合并</strong>的分支上操作的指令</p><h2 id="修改被rebase分支的历史记录"><a href="#修改被rebase分支的历史记录" class="headerlink" title="修改被rebase分支的历史记录"></a>修改被rebase分支的历史记录</h2><p>rebase -i/git rebase –amend/git rebase –continue/git rebase –abort</p><p>如果我们想在rebase的过程中对一部分提commit交进行修改，可以在’git rebase’命令中加入’-i’或’–interactive’参数去调用交互模式。</p><p>假设我们要将feature1上的commit记录的<strong>基础点重设为master分支</strong>的最后一条，同时希望修改我们接到master后面的feature1上的提交信息。</p><p>看下feature1上的commit记录，倒数第三条是master上的提交，那次提交便是feature1在master上的基础点：</p><p><img src="http://qiniu.mrshulan.com/1546588612739.png" alt="1546588612739"></p><p>我们在feature1上执行：</p><p><code>git rebase -i master</code></p><p>接着我们进入了编辑页面，顶部列出了将要「被 rebase」的所有 commit记录，也就是我们从master分支checkout出feature1分支后的两条提交记录。这个排列是正序的，和log显示的顺序相反</p><p>pick的意思是直接应用，我们如果要修改某次的提交信息，需要把提交信息修改成edit，这样在应用到这条commit记录时，Git会停下来让我们修正，假设我们要对这两条commit提交信息分别修改，在vim下讲两个pick改成eidt，然后输入”：wq!保存并退出”</p><p>这里Git在执行到”feature1 first commit”便停了下来，提示我们可以通过amend来修改这条commit记录，amend就是用来修改HEAD所指向的这条最新记录，这个具体下面会讲。我们输入git commit –amend，然后进入编辑页面修改上条commit信息，保存。</p><p><code>git rebase --amend</code>  修改提交的信息，不能为空，空了就没有用</p><p><code>git rebase --continue</code>  继续执行rebase  如果你改了多个pick -&gt; edit就要多次 –amend –continue来回</p><p><img src="http://qiniu.mrshulan.com/1546588780856.png" alt="1546588780856"></p><p><code>git rebase --abort</code> 放弃rebase过程</p><p>成功之后 git log就会成功的看到修改之后commit</p><p><img src="http://qiniu.mrshulan.com/1546588809485.png" alt="1546588809485"></p><h4 id="修改当前的分支的历史记录"><a href="#修改当前的分支的历史记录" class="headerlink" title="修改当前的分支的历史记录"></a>修改当前的分支的历史记录</h4><p>对历史commit记录修改的功能，不仅适用在需要合分支的时候，我们也可以在当前分支进行原地操作，直接对当前分支历史错误的提交记录进行修改。</p><p><code>git rebase -i HEAD~2</code> &lt;=&gt; <code>git rebase -i HEAD^^</code> ^和~都是偏移符号也就是最近的第几个</p><p><strong>^ 的用法</strong>：表示对当前指针指向的commit记录向前偏移，偏移数量就是^的数量，例如： HEAD^^^，表示的是HEAD所指向的那个commit往前三个的那条commit记录，也就是图中圈出来我们要修改的那个commit前面的那个commit</p><p><strong>~ 的用法</strong>：同样是当前指针的基础上往回偏移，偏移数量就是~后跟着的数字，例如：HEAD ~1表示的同样是图中的commit前面的那条commit</p><p><img src="http://qiniu.mrshulan.com/1546589101346.png" alt="1546589101346"></p><p>rebase它其实是对分支重设基础点的一个操作，在对别的分支操作时，会找被rebase的分支和要rebase到的分支两个分支的交点，也就是被rebase的分支的一个基础点，分叉点，然后对从基础点分叉出来的提交重新设置为要rebase到的分支最新一条记录</p><p>所以这里git rebase -i HEAD^^^，rebase后面跟着的是一个自己分支的某个提交记录，实际上就是对rebase -i 后面跟着的那条记录开始（不包括开始点）往后的所有commit重新设置基础点，把这些commit重新生成一遍再接在这个新的基础点后面，对于文件历史变化来说，这个其实就是空操作。</p><p><img src="http://qiniu.mrshulan.com/1546508313713.png" alt="1546508313713"></p><h4 id="替换最近一条commit信息"><a href="#替换最近一条commit信息" class="headerlink" title="替换最近一条commit信息"></a>替换最近一条commit信息</h4><p>git commit –amend</p><p>git commit –amend是对上一条commit命令进行修正。当我们执行这条命令时时，Git会把当前暂存区的内容和这次commit的新内容合并创建一个新的commit，把我们当前HEAD指向的最新的commit替换掉。例如我们当前最新一条commit记录中，我们输入错了提交信息，想要修改，又或者我们提交错了一点东西，又不想生成一个新的commit记录，我们都可以使用这个命令。</p><p>这里假设我们需要修复一个上次提交错的文件，同时想修改上一个commit的信息</p><p>修改之后添加的 暂存区</p><p>​    </p><p><code>git commit --amend</code> 进入vim编辑模式进行修改</p><p>amend用于修改上一条commit信息时，实际上并不是对上一个commit修改，而是生成新的对它进行替换。我们看第一张图我们操作的那条commit修改之前，和我们修改后生成的新的commit，id是完全不一样的（文章上介绍过生成方式），是两个不同的commit</p><p>所以这个时候如果我们对已经push到远端的commit记录在本地仓库进行–amend操作之后，直接push到远端仓库是不会成功的，因为本地丢失了远端仓库那个我们替换的commit</p><p>当然如果你啥也不改直接保存，那就相当于空操作嘛，老的commit就不会被替换了，还是它本身</p><h2 id="丢弃最新的提交"><a href="#丢弃最新的提交" class="headerlink" title="丢弃最新的提交"></a>丢弃最新的提交</h2><p>git reset</p><p>最新一次的commit的内容有问题，想要丢弃这次提交，先log看下提交记录：</p><p><code>git reset HEAD~1</code></p><p>被撤销的那条提交并没有消失，只是log不再展现出来，因为已经被丢弃。如果你在撤销它之前记下了它的 SHA-1 码，那么还可以通过这个编码找到它，执行如下：</p><p><code>git reset commit编码</code></p><p><img src="http://qiniu.mrshulan.com/1546589548440.png" alt="1546589548440"></p><p>然后我们再次git log 就可以看到那调丢弃的已经恢复了 而且head指向了它</p><h4 id="参数–hard-–sort-–mixed"><a href="#参数–hard-–sort-–mixed" class="headerlink" title="参数–hard –sort –mixed"></a>参数–hard –sort –mixed</h4><p>这里reset后面跟的参数影响的正是这工作目录（working area),暂存区（index)和本地版本库（HEAD）的区别内部的数据状态。</p><p>`git reset –soft HEAD~1</p><p>执行这句命令时，实际上我们只是把本地版本库，指向了我们要指向的那个commit，而暂存区和本地工作目录是一致的，保留着我们的文件修改，操作看下：</p><p><img src="http://qiniu.mrshulan.com/1546589609264.png" alt="1546589609264"></p><p>执行完，status看下工作区状态，我们可以看到现在我们的暂存区有一个待commit的文件，证明现在本地版本库和暂存区是不一致的，而这个不一致刚好是我们丢弃的那次commit修改的内容，同时我们并没有看到有文件是”changes not staged for commit”,说明当前我们的工作目录和暂存区文件状态是一致的。（绿色是撤销成功的状态，红色是未撤销的状态）</p><p>总结如下 HEAD(本地版本库） != INDEX （暂存区文件内容）== WORKING （本地工作目录）(就是撤销这一次的commit)</p><p><img src="http://qiniu.mrshulan.com/1546508879972.png" alt="1546508879972"></p><p><code>git reset --hard HEAD~1</code>  这个就是版本回退</p><p>执行这句命令时，不仅本地版本库会指向我们制定的commit记录，同时暂存区和本地工作目录也会同步变化成我们制定的commit记录的状态，期间所有的更改全部丢失，操作看下：</p><p><img src="http://qiniu.mrshulan.com/1546589909398.png" alt="1546589909398"></p><p>执行完我们看到，暂存区和工作目录都没有文件记录（啥都给你没了）</p><p>但是我们可以通过git reflog进行前进  或者你自己再次提交（这样就不划算了）</p><p><img src="http://qiniu.mrshulan.com/1546590086538.png" alt="1546590086538"></p><p><code>git reset 前进的commit编码</code> 只不过需要重新提交，因为监视到文件改动了 当然可以checkout – file 从暂存区拉回去</p><p>总结如下 HEAD(本地版本库） == INDEX （暂存区文件内容）== WORKING （本地工作目录）</p><p><img src="http://qiniu.mrshulan.com/1546589755454.png" alt="1546589755454"></p><p><code>git reset --mixed HEAD~1</code> 默认就是这个参数</p><p>–mixed是reset的默认参数，也就是当我们不指定任何参数时的参数。它将我们本地版本库指向我们制定的commit记录，同时暂存区也同步变化，而本地工作目录并不变化，所有我们丢弃的commit记录涉及的文件更改都会保存在本地工作目录working area中，所以数据不会丢失，但是所有改动都未被添加进暂存区，方便我们检查修改，操作看下：</p><p><img src="http://qiniu.mrshulan.com/1546589483409.png" alt="1546589483409"></p><p>执行完我们看到，在工作目录中有文件修改，而暂存区和本地版本库与我们指定的commit记录保持一致</p><p>总结如下 HEAD(本地版本库） == INDEX （暂存区文件内容）！= WORKING （本地工作目录）</p><p><img src="http://qiniu.mrshulan.com/1546508986655.png" alt="1546508986655"></p><h2 id="丢弃历史中的某一条提交"><a href="#丢弃历史中的某一条提交" class="headerlink" title="丢弃历史中的某一条提交"></a>丢弃历史中的某一条提交</h2><p>git rebase -i/ git rebase –onto</p><p>上面我们说到reset可以让我们回归到历史的某条commit记录，但是我们从那条记录之后的记录就都被丢弃，如果我们只想丢弃历史记录中的某一条而不影响其之后的记录要怎么做呢？</p><p>还是通过git rebase。这里不放在上面rebase的部分一起说是因为rebase的这个用法，在reset之后来讲会更方便理解。</p><p><code>git rebase -i HEAD~2</code>  -i后边跟着我们要删除的记录前面（老的）的任意记录，设置为基础点，想象一下那个链</p><p>进入编辑页后，i进入插入模式，我们之前修改commit是将pick(应用）修改为edit，这次要撤销某条记录，我们直接把改条记录删除</p><p>然后直接就成功了</p><p><img src="http://qiniu.mrshulan.com/1546590957204.png" alt="1546590957204"></p><p>正序 所以我们删除 第二行（最新的）</p><p><img src="http://qiniu.mrshulan.com/1546591027615.png" alt="1546591027615"></p><p><code>git rebase --onto</code></p><p>我们之前在对分支执行rebase时，是选择所在分支与目标分支的交叉点作为起点，把所在分支从这个起点到最新的commit记录接到目标分支的结尾。</p><p>而rebase –onto可以帮我们指定这个起点，从新起点到所在分支最新记录之前的commit记录才接到目标分支上：</p><p><img src="http://qiniu.mrshulan.com/1546509229559.png" alt="1546509229559"></p><p>假设我们再1245这条分支上，对123（master)执行rebase不带任何参数,默认我们所在分支的起点是2，2后面的4和5会复制出来一个6和7接在3后面</p><p>如果我只想把5提交到3上，不想附带上4，那么我可以执行：</p><p><code>git rebase --onto 3 4 5 //345分别是commit记录的代指</code></p><p>–onto 参数后面有三个附加参数：目标 commit（要接在哪次记录后面）、起点 commit（起点排除在外，从起点之后的记录）、终点 commit。所以上面这行指令就会从4（不包括4）往下数，一直数到5，把中间涵盖的所有commit记录，重新提交到 3 上去。</p><p>假设我们要丢失当前分支倒数第二个提交，HEAD^对应的那个，那么我们只要执行：</p><p><code>git rebase --onto HEAD^^ HEAD^ HEAD</code></p><p>这句的意思是，以倒数第三个新的目标点，从倒数第二个不包括倒数第二个的commit记录开始，到HEAD之间的（本例中只有HEAD一个）接到新的目标点之后，所以倒数第二个就被跳过，直接最新的接在倒数第三个的后面。</p><h2 id="生成一条新提交的撤销操作"><a href="#生成一条新提交的撤销操作" class="headerlink" title="生成一条新提交的撤销操作"></a>生成一条新提交的撤销操作</h2><p>git revert</p><p>在我们已经push到远端仓库后发现有一条commit记录对应的修改应该被删除时，我们可以在用上面的操作方式在本地仓库操作删除那条记录，再推送到远端，但是注意，因为我们是删除了一条记录，所以在我们推送远端仓库的时候，会因为我们本地没有远端对应的那条记录而提示push失败</p><p>这时，如果你本来就希望用本地的内容覆盖掉中央仓库的内容，并且有足够的把握不会影响别的同事的代码，那么就不要按照提示去先pull再push了，而是要选择「强行」push：</p><p>git push origin 分支名 -f //-f force 强制`</p><p>但是在我们分支协作开发时，在向master分支提交代码时，是不应该用-f的，因为这样很容易让我们本地的内容覆盖或者影响同事们提交上去的代码。那这个时候如果我们想要撤销某次提交对应的改动要怎么办呢？</p><p><img src="http://qiniu.mrshulan.com/1546591330733.png" alt="1546591330733"></p><p>生成一条与我们要撤销的那条记录相反的新的commit记录：</p><p><code>git revert 要撤销的改动对应的commit记录</code> 之后会进入vi 你说明这次提交的目的就好了</p><p><img src="http://qiniu.mrshulan.com/1546591451610.png" alt="1546591451610"></p><p>git revert会生成一个与后面对应的commit记录相反的一次文件提交，从而将那次修改抵消，达到撤销的效果。</p><p>执行revert后再push到远端，我们文件内容就恢复了。revert的方式并不会造成某条记录在历史记录中消失，而只是生成一个新的与我们要撤销的记录相反的文件提交而已。</p><h2 id="分支和HEAD分离"><a href="#分支和HEAD分离" class="headerlink" title="分支和HEAD分离"></a>分支和HEAD分离</h2><p>git checkout</p><p>在我们执行git checkout branch分支名的时候，HEAD会指向这个分支，同时两者都指向这个分支最新的那条commit记录。其实我们操作的这些分支，就是我们的一种理解，本质上它也是一个指针，对应着commit记录，所以checkout后面也可以直接指定某一条commit记录。</p><p>但是不一样的是，在我们checkout到某一条特定的commit记录时，HEAD和分支就脱离了，我们只是让HEAD指向了我们指定的记录，而所在的分支的指针并没有同步过来。HEAD 处于游离状态时，开发者可以很方便地在历史版本之间互相切换，比如要回到某次提交，只需要  对应的  或者  名即可。</p><p><img src="http://qiniu.mrshulan.com/1546594111369.png" alt="1546594111369"></p><p>checkout本质上的功能其实是出入到指定的commit记录的一种操作。</p><p><code>git checkout --detach</code> Git就会把HEAD和feature_1原地脱离，直接指向当前commit</p><p><img src="http://qiniu.mrshulan.com/1546592200410.png" alt="1546592200410"></p><p>变成</p><p><img src="http://qiniu.mrshulan.com/1546592218902.png" alt="1546592218902"></p><p><code>git checkout commit编码</code>指定游离</p><p><img src="http://qiniu.mrshulan.com/1546592410298.png" alt="1546592410298"></p><p>并且会产生新的分支…(弊端)</p><p><img src="http://qiniu.mrshulan.com/1546592473426.png" alt="1546592473426"></p><p>如果你在游离的分支产生了提交</p><p><img src="http://qiniu.mrshulan.com/1546593178406.png" alt="1546593178406"></p><p><img src="http://qiniu.mrshulan.com/1546593281212.png" alt="1546593281212"></p><p>切换会 master 分支时，在游离状态所做的修改和提交无法追溯，</p><p><img src="http://qiniu.mrshulan.com/1546593539415.png" alt="1546593539415"></p><p>然后再游离回去 </p><p><code></code>git checkout 记录的commit编码</p><p><img src="http://qiniu.mrshulan.com/1546593669237.png" alt="1546593669237"></p><p><strong>创建一个新的分支</strong>temp 然后 <strong>合并他</strong> 继而<strong>删除他</strong></p><h2 id="临时存放工作目录的改动"><a href="#临时存放工作目录的改动" class="headerlink" title="临时存放工作目录的改动"></a>临时存放工作目录的改动</h2><p>git stash</p><p>工作中可能经常遇到我们现在在某个分支开发，突然需要切换到master发个包或者到别的分支做些修复，但是我们本地改了一半儿的东西又不想先提交（例如可能会有改了一半儿的bug，推上去的话搞得一起在这个分支的小伙伴拉下来项目都跑不起来），为了防止带到别的分支同时不用提交到远端分支，又不丢弃自己现在的改动，我们可以借用stash</p><p><code>git stash</code> 临时保存工作区的改动</p><p>stash指令可以帮你把工作目录的内容全部放在你本地的一个独立的地方，不是暂存区，它不会被提交，也不会被删除，同时你的工作目录已经清理干净，可以随时切换分支，等之后需要的时候，再回到这个分支把这部分改动取出来</p><p><code>git stash pop</code> 取出工作区的改动</p><p><img src="http://qiniu.mrshulan.com/1546594318251.png" alt="1546594318251"></p><p>这里注意，我们untracked的文件，是不在本地仓库追踪记录里的（上开头部分说过），自然stash的时候也会忽略他们，这时如果想要stash一起保存这些untracked的文件，我们可以</p><p><code>git stash -u</code> –include-untracked 的简写，将untracked的文件一并临时存储</p><h2 id="操作记录恢复"><a href="#操作记录恢复" class="headerlink" title="操作记录恢复"></a>操作记录恢复</h2><p>git reflog</p><p>它是Git仓库中引用的移动记录，如果不指定引用，git log默认展示HEAD所指向的一个顺序的提交列表。它不是本地仓库的一部分，它单独存储，而且在push，fetch或者clone时都不包括它，它纯属是本地的一个操作的记录。</p><p>每行记录都由版本号，HEAD值和操作描述三列分组成。</p><ul><li>版本号：这次操作的一个id</li><li>HEAD值：同样用来标识版本，但是不同于版本号的是，Head值是相对的。括号里的值越小，表示版本越新</li><li>描述：操作行为的描述，包括我们commit的信息或者分支的切换等。</li></ul><p>reflog为每一条<strong>操作</strong>显示其对应的id版本号，这个id可以很好地帮助我们你恢复误操作的数据，例如我们错误地reset了一个旧的提交，或者rebase等操作，这个时候我们可以使用reflog去查看在误操作之前的信息，并且使用git reset 版本号，去恢复之前的某一次操作状态，操作过后依然可以在reflog中看到状态之后的所有操作记录</p><p>区别于git log，<strong>log显示的是所有本地版本库的提交信息</strong>，commit记录，且不能察看已经删除了的commit记录。而git reflog可以查看所有分支的所有操作记录（包括commit和reset的操作），包括已经被删除的commit记录，几乎所有的操作都记录在其中，随时可以回滚。</p><p><img src="http://qiniu.mrshulan.com/1546594341532.png" alt="1546594341532"></p><h2 id="打上标签（tag）"><a href="#打上标签（tag）" class="headerlink" title="打上标签（tag）"></a>打上标签（tag）</h2><p>git tag / git tag show/ git tag -a  -m/</p><p>轻量级的（lightweight）和含附注的（annotated）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p><p><code>git tag</code> </p><p><code>git show tagname</code>查看版本信息</p><p>​    </p><p><code>git tag -a tagname -m&quot;information&quot;</code> 含附注型的标签</p><p><img src="http://qiniu.mrshulan.com/1546598944875.png" alt="1546598944875"></p><p>如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的 <code>-a</code> 改为 <code>-s</code> （译注： 取 <code>signed</code> 的首字母）即可：</p><p>git tag -s tagname -m”information”` 签署标签 git show 的时候可以看见</p><p>补打标签只需要在-a 后边加上 commit编码</p><p><code>git tag -d tagname</code>删除本地标签</p><p><code>git tag -l 1.*.</code>* 查看指定类型版本</p><p><code>git push origin --tags</code> 推送所有标签 也可以指定版本 只有这样推送标签远程仓库才会有release</p><p><img src="http://qiniu.mrshulan.com/1546599787497.png" alt="1546599787497"></p><p><code>git push origin -d tagname</code> 删除远程仓库标签 同时记得 删除本地标签</p><p>老版本是这么删的 (&lt; 1.7.0)<code>git push origin :refs/tags/tagname</code></p><h2 id="vim操作"><a href="#vim操作" class="headerlink" title="vim操作"></a>vim操作</h2><p>1.输入i进入插入模式，INSECT</p><p>2.按下ESC键，退出编辑模式，切换到命令模式。 </p><p>3.保存修改并且退出 vim：”:wq” (英文输入法状态，中文会直接闪烁)</p><p>4.保存文件，不退出vim：”:w”</p><p>5.放弃修改并退出vim：”:q!”</p><p>6.放弃所有文件修改，但不退出 vim：”:e!”</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://mp.weixin.qq.com/s/iF6M55WdwinAxyovMm38eg" target="_blank" rel="noopener">花点时间顺顺Git</a></p>]]></content>
    
    <summary type="html">
    
      Git/GitHub 使用过程中的一些笔记
    
    </summary>
    
      <category term="笔记" scheme="https://mrshulan.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Git" scheme="https://mrshulan.com/tags/Git/"/>
    
      <category term="GitHub" scheme="https://mrshulan.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>blogtest</title>
    <link href="https://mrshulan.com/2018/08/27/blogtest/"/>
    <id>https://mrshulan.com/2018/08/27/blogtest/</id>
    <published>2018-08-27T14:57:09.000Z</published>
    <updated>2019-03-12T02:47:37.494Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://desk-fd.zol-img.com.cn/t_s960x600c5/g5/M00/03/00/ChMkJlhvFDCIWv0mAAaVhLKmP0wAAZIogMcf1wABpWc614.jpg" alt="" style="width:100%"></p><a id="more"></a> <p>​                                                                  大晚上的👇</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=35270898&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      巴拉巴拉巴拉能量
    
    </summary>
    
      <category term="travel" scheme="https://mrshulan.com/categories/travel/"/>
    
    
      <category term="摄影" scheme="https://mrshulan.com/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="旅行" scheme="https://mrshulan.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
</feed>
